// build tree from inorder and postorder

#include <bits/stdc++.h>
using namespace std;

struct Node {
  int data;
  struct Node* left;
  struct Node* right;

  Node(int val)
  {
    data = val;
    left = NULL;
    right = NULL;
  }
};

int print_level_sum(Node* temp)
{
  queue<Node*> qt;
  if(temp == NULL) return 0;
  
  qt.push(temp);
  qt.push(NULL);
  int k = 0, sum = 0;
  while(!qt.empty())
  {
    struct Node* front = qt.front();
      qt.pop();
    if(front != NULL)
    {
      
      cout<<front->data<<"  ";
      if( k == 2) sum+=front->data;
      if(front->left) qt.push(front->left);
      if(front->right) qt.push(front->right);
    }
    else if(!qt.empty())
    {
      cout<<endl;
        qt.push(NULL);
        k++;
        

    }
    
  }
return sum;
}

int main() {
  // creating a tree from struct

  Node* root = new Node(1);
  root->left = new Node(2);
  root->right = new  Node(3);
  root->left->left = new  Node(4);
  root->left->right = new  Node(5);
  root->right->left = new  Node(6);
  root->right->right = new  Node(7);

  cout<<print_level_sum(root)<<endl;
}
