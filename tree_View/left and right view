 #include<bits/stdc++.h>
using namespace std;
struct Node{
    int data;
    Node* left;
    Node* right;
    Node(int data)
    {
        this->data = data;
        left = NULL;
        right = NULL;
    }
};
vector<int> left_view(Node* root)
{
    vector<int> v;
    if(root == NULL) return v;
   queue<Node*> q;
   q.push(root);

   while(!q.empty())
   {
       int n = q.size();
       for(int i = 0 ; i < n; i++){
           Node* temp = q.front();
           q.pop();
            if(i == 0) v.push_back(temp->data);          
               if(temp->left)
                q.push(temp->left);
               if(temp->right)
                q.push(temp->right);
       }
   }
   return v;
}

vector<int> right_view(Node* root)
{
    vector<int> v;
    if(root == NULL) return v;
   queue<Node*> q;
   q.push(root);

   while(!q.empty())
   {
       int n = q.size();
       for(int i = 0 ; i < n; i++){
           Node* temp = q.front();
           q.pop();
            if(i == n-1) v.push_back(temp->data);          
               if(temp->left)
                q.push(temp->left);
               if(temp->right)
                q.push(temp->right);
       }
   }
   return v;
}

void inorder(Node* root)
{
    if(root != NULL)
    {
        inorder(root->left);
        cout<<root->data<<" ";
        inorder(root->right);
    }
}
int main()
{
    Node* root = new Node(1);
    root->left = new Node(2);
    root->right = new Node(5);
    root->left->left = new Node(3);
    root->left->right = new Node(4);
    root->right->right = new Node(6);
    int n;
    vector<int> v;
    cout<<"Choose 1.Left View\n2:Right View\n";
    cin>>n;
    switch(n)
    {
        case 1:v = left_view(root);
            break;
        case 2:v = right_view(root);
            break;
        default: cout<<"choose left or right"<<endl;
    }
    for(auto it: v)
    {
        cout<<it<<" ";
    }
    return 0;
}
