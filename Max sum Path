/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    static int maxPathUtil(TreeNode* root, int &ans)
    {
        if(root == NULL) return 0;
        
        int left = maxPathUtil(root->left,ans);
        int right = maxPathUtil(root->right,ans);
        
        int case1 = root->val;
        int case2 = root->val + left;
        int case3 = root->val + right;
        int case4 = root->val + right + left;
        int nodeMax = max(max(case1,case2), max(case3,case4));
        ans = max(nodeMax, ans);
        // to find the right ans left of node going through current root
        
        int single_path_sum = max(root->val,max(root->val + left,
                                                root->val + right));
        return single_path_sum;
        
        
    }
    int maxPathSum(TreeNode* root) {
       int ans = INT_MIN;
        maxPathUtil(root, ans);
        return ans;
    }
};
